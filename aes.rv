interface Timer():
    implementation:
        c = "rlib/nrf52/app_timer_sys.stg"
        #c = "rlib/linux/timer.stg"
        java = "rlib/java/timer.stg"

    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)
    event fired()

interface Clock():
    implementation:
        c = "rlib/nrf52/clock.stg"
        #c = "rlib/posix/clock.stg"

    def getNow()

local model AESInput():
    properties:
        records = 1
    schema:
        data : byte[32]

local model Key():
    properties:
        records = 1
    schema:
        number : int32
        data : byte[16]

local model AESOutput():
    properties:
        records = 1
    schema:
        data : byte[32]

streaming model Encrypted():
    properties:
        records = 5
        flow = EmbeddedSpace -> GatewaySpace
    schema:
        data : byte[32]

controller CounterModeAES(m_in : AESInput, m_key : Key, m_out : AESOutput):
    Rcon : byte[] = [ 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a ]
    Sbox : byte[] = [
                0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
                0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
                0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
                0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
                0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
                0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
                0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
                0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
                0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
                0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
                0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
                0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
                0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
                0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
                0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
                0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
                ]

    test_iv : byte[] = [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff]

    event m_in.save_done():
        key = m_key.get(0).data
        plaintext = self.record.data

        # key schedule from Wikipedia
        ks_n = 16
        ks_b = 176
        expanded_key : byte[176]
        # The first n bytes of the expanded key are simply the encryption key
        for i = 0 to ks_n:
            expanded_key[i] = key[i]
            
        for round = 1 to 11:
            # We do the following to create 4 bytes of expanded key:
            # We create a 4-byte temporary variable, t
            t : byte[4]
            
            # We assign the value of the previous four bytes in the expanded key to t
            for j = 0 to 4:
                t[j] = expanded_key[ks_n*round - 4 + j]
            # We perform the key schedule core (see above) on t, with i as the rcon iteration value
            # Key schedule core
            # Use the above described rotate operation to rotate the output eight bits to the left
            tmp = t[0]
            t[0] = t[1]
            t[1] = t[2]
            t[2] = t[3]
            t[3] = tmp
            # Apply Rijndael's S-box on all four individual bytes in the output word
            t[0] = Sbox[t[0]]
            t[1] = Sbox[t[1]]
            t[2] = Sbox[t[2]]
            t[3] = Sbox[t[3]]
            # On just the first (leftmost) byte of the output word, exclusive OR the byte with 2 to the power of (round-1) in Rijndael's finite field.
            # In other words, perform the rcon operation with round as the input, and exclusive or the rcon output with the first byte of the output word
            t[0] ^= Rcon[round]
            
            # We exclusive-OR t with the four-byte block n bytes before the new expanded key. This becomes the next 4 bytes in the expanded key
            for j = 0 to 4:
                expanded_key[ks_n*round + j] = t[j] ^ expanded_key[ks_n*round - 16 + j]
            
            # We then do the following three times to create the next twelve bytes of expanded key:
            for k = 0 to 3:
                # We assign the value of the previous 4 bytes in the expanded key to t
                # We exclusive-OR t with the four-byte block n bytes before the new expanded key. This becomes the next 4 bytes in the expanded key
                for j = 0 to 4:
                    here = ks_n*round + k * 4 + 4
                    expanded_key[here + j] = expanded_key[here - 4 + j] ^ expanded_key[here - ks_n + j]

        block_size = 16
        iv : byte[16]
        state : byte[16]
        for i = 0 to block_size:
            iv[i] = test_iv[i]
            
        ciphertextrec = m_out.create()
        ciphertext = ciphertextrec.data
        
        plaintext_length = 32
        n_blocks = (plaintext_length + (block_size-1))//block_size
        for block = 0 to n_blocks:
            # encrypt state
            for i = 0 to 16:
                state[i] = iv[i]
            
            # AddRoundKey
            for i = 0 to block_size:
                state[i] ^= expanded_key[i]
            
            # for each round
            for round = 1 to 11:
                # SubBytes
                for i = 0 to block_size:
                    state[i] = Sbox[state[i]]
                
                # ShiftRows
                # CAREFUL: state is column major

                # the first row is left unchanged
                # Each byte of the second row is shifted one to the left
                tmp = state[1]
                state[1] = state[5]
                state[5] = state[9]
                state[9] = state[13]
                state[13] = tmp
                # the third and fourth rows are shifted by offsets of two and three respectively
                tmp = state[2]
                state[2] = state[10]
                state[10] = tmp
                tmp = state[6]
                state[6] = state[14]
                state[14] = tmp
                #
                tmp = state[15]
                state[15] = state[11]
                state[11] = state[7]
                state[7] = state[3]
                state[3] = tmp
                
                if round != 10:
                    # MixColumns
                    for j = 0 to 4:
                        column : byte[4]
                        for c = 0 to 4:
                            column[c] = state[j*4+c]
                    
                        # The array 'a' is simply a copy of the input array 'r'
                        # The array 'b' is each element of the array 'a' multiplied by 2
                        # in Rijndael's Galois field
                        # a[n] ^ b[n] is element n multiplied by 3 in Rijndael's Galois field
                        a : byte[4]
                        b : byte[4]
                    
                        for c = 0 to 4:
                            a[c] = column[c]
                            h = a[c] & 0x80 # hi bit
                            b[c] = (byte) (a[c] << 1) # implicitly removes high bit because b[c] is a byte, so we xor by 0x1b and not 0x11b in the next line
                            if h == 0x80:
                                b[c] ^= (byte)0x1B # Rijndael's Galois field
                        column[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1] # 2 * a0 + a3 + a2 + 3 * a1
                        column[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2] # 2 * a1 + a0 + a3 + 3 * a2
                        column[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3] # 2 * a2 + a1 + a0 + 3 * a3
                        column[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0] # 2 * a3 + a2 + a1 + 3 * a0

                        for c = 0 to 4:
                            state[j*4+c] = column[c]
                        
                # AddRoundKey
                for i = 0 to block_size:
                    state[i] ^= expanded_key[round * ks_n + i]
            
            # finally, state contains the AES encrypted iv
            # now apply counter mode (XOR the encrypted iv with the plaintext)
            
            for i = 0 to block_size:
                if block_size * block + i >= plaintext_length:
                    break
                ciphertext[block_size * block + i] = state[i] ^ plaintext[block_size * block + i]
            
            # increment the IV
            for i = 0 to block_size:
                iv[block_size-i-1] = (byte) (iv[block_size-i-1] + 1)
                if iv[block_size-i-1] != 0:
                    break

        m_out.save(ciphertextrec)


controller EController(timer : Timer, clock: Clock, aes_in : AESInput, aes_out : AESOutput, encrypted : Encrypted, key : Key):
    test_key : byte[16] = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]

    event system.started():
        keyrec = key.create()
        for i = 0 to 16:
            keyrec.data[i] = test_key[i]
            #keyrec.data[i] = (byte)i
        key.save(keyrec)

        plainrec = aes_in.create()
        clock.getNow()
        aes_in.save(plainrec)
        timer.start_periodic(1000)

    event aes_out.save_done():
        encrec = encrypted.create()
        for i = 0 to 32:
            encrec.data[i] = self.record.data[i]
        encrypted.save(encrec)
        clock.getNow()
        aes_out.delete(self.record)

    event timer.fired():
        rec = aes_in.first()
        for i = 0 to 32:
            rec.data[31-i] = (byte) (rec.data[31-i] + 1)
            if rec.data[31-i] != 0:
                break
        aes_in.save(rec)

    event encrypted.full():
        system.print("model is full")
        timer.cancel()

    event encrypted.departed():
        timer.start_periodic(1000)
        encrypted.delete(self.record)


controller GController(aes_in : AESInput, aes_out : AESOutput, encrypted : Encrypted, key : Key):
    test_key : byte[16] = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]

    event system.started():
        keyrec = key.create()
        for i = 0 to 16:
            keyrec.data[i] = test_key[i]
            #keyrec.data[i] = (byte)i
        key.save(keyrec)

    event encrypted.arrived():
        system.print("record arrived")
        encrec : AESInput.Record
        if aes_in.size() > 0:
            encrec = aes_in.first()
        else:
            encrec = aes_in.create()
        s = ""
        for i = 0 to 32:
            encrec.data[i] = self.record.data[i]
            s += (str)self.record.data[i] + " "
        system.print(s)
        aes_in.save(encrec)
        encrypted.delete(self.record)

    event aes_out.save_done():
        system.print("record decrypted")
        s = ""
        for i = 0 to 32:
            s += (str)self.record.data[i] + " "
        system.print(s)
        aes_out.delete(self.record)


space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v1
        #system = Posix.v2008


    interfaces:
        timer = Timer()
        clock = Clock()

    models:
        aes_in = AESInput()
        aes_out = AESOutput()
        encrypted = Encrypted()
        key = Key()

    controllers:
        aes = CounterModeAES(m_in = models.aes_in, m_out = models.aes_out, m_key = models.key)
        ctrl = EController(timer = interfaces.timer, clock = interfaces.clock, aes_in = models.aes_in, aes_out = models.aes_out, key = models.key, encrypted = models.encrypted)


space GatewaySpace:
    platform:
        language = JLang
        system = Android.v19
        #system = J2SE.v18

    models:
        aes_in = AESInput()
        aes_out = AESOutput()
        encrypted = Encrypted()
        key = Key()

    controllers:
        aes = CounterModeAES(m_in = models.aes_in, m_out = models.aes_out, m_key = models.key)
        ctrl = GController(aes_in = models.aes_in, aes_out = models.aes_out, encrypted = models.encrypted, key = models.key)
